!function ($) {

    "use strict"; // jshint ;_;


    /* COLLAPSE PUBLIC CLASS DEFINITION
     * ================================ */

    var SlideCollapse = function (element, options) {
        this.$element = $(element)
        this.options = $.extend({}, $.fn.collapse.defaults, options)

        if (this.options.parent) {
            this.$parent = $(this.options.parent)
        }

        this.options.toggle && this.toggle()
    }

    SlideCollapse.prototype = {

        constructor: SlideCollapse

    , dimension: function () {
        var hasWidth = this.$element.hasClass('width')
        return hasWidth ? 'width' : 'height'
    }

    , show: function () {
        var dimension
          , scroll
          , actives
          , hasData

        if (this.transitioning) return

        dimension = this.dimension()
        scroll = $.camelCase(['scroll', dimension].join('-'))
        actives = this.$parent && this.$parent.find('> .accordion-group > .in')

        if (actives && actives.length) {
            hasData = actives.data('closed')
            if (hasData && hasData.transitioning) return
            actives.collapse('hide')
            hasData || actives.data('closed', null)
        }

        this.$element[dimension](0)
        this.transition('addClass', $.Event('show'), 'shown')
        $.support.transition && this.$element[dimension](this.$element[0][scroll])
    }

    , hide: function () {
        var dimension
        if (this.transitioning) return
        dimension = this.dimension()
        this.reset(this.$element[dimension]())
        this.transition('removeClass', $.Event('hide'), 'hidden')
        this.$element[dimension](0)
    }

    , reset: function (size) {
        var dimension = this.dimension()

        this.$element
          .removeClass('closed')
          [dimension](size || 'auto')
          [0].offsetWidth

        this.$element[size !== null ? 'addClass' : 'removeClass']('closed')

        return this
    }

    , transition: function (method, startEvent, completeEvent) {
        var that = this
          , complete = function () {
              if (startEvent.type == 'show') that.reset()
              that.transitioning = 0
              that.$element.trigger(completeEvent)
          }

        this.$element.trigger(startEvent)

        if (startEvent.isDefaultPrevented()) return

        this.transitioning = 1

        this.$element[method]('in')

        $.support.transition && this.$element.hasClass('closed') ?
          this.$element.one($.support.transition.end, complete) :
          complete()
    }

    , toggle: function () {
        this[this.$element.hasClass('in') ? 'hide' : 'show']()
    }

    }


    /* COLLAPSIBLE PLUGIN DEFINITION
     * ============================== */

    $.fn.slideCollapse = function (option) {
        return this.each(function () {
            var $this = $(this)
              , data = $this.data('collapse')
              , options = typeof option == 'object' && option
            if (!data) $this.data('collapse', (data = new Collapse(this, options)))
            if (typeof option == 'string') data[option]()
        })
    }

    $.fn.slideCollapse.defaults = {
        toggle: true
    }

    $.fn.slideCollapse.Constructor = SlideCollapse


    /* COLLAPSIBLE DATA-API
     * ==================== */

    $(document).on('click.collapse.data-api', '[data-toggle=slideCollapse]', function (e) {
        var $this = $(this);
        var href;
        var target = $this.attr('data-target') || e.preventDefault() || (href = $this.attr('href')) && href.replace(/.*(?=#[^\s]+$)/, '') //strip for ie7,
        var option = $(target).data('slideCollapse') ? 'toggle' : $this.data()
        $(target)[$(target).hasClass('closed') ? 'removeClass' : 'addClass']('closed')
        //$(target).collapse(option)
    })

}(window.jQuery);